type Metadata = record {
  fee : nat;
  decimals : nat8;
  owner : principal;
  logo : text;
  name : text;
  totalSupply : nat;
  symbol : text;
};
type TokenInfo = record {
  holderNumber : nat64;
  deployTime : nat64;
  metadata : Metadata;
  historySize : nat64;
  cycles : nat64;
  feeTo : principal;
};
type TxError = variant {
  InsufficientAllowance;
  InsufficientBalance;
  ErrorOperationStyle;
  Unauthorized;
  LedgerTrap;
  ErrorTo;
  Other;
  BlockUsed;
  AmountTooSmall;
};
type TxReceipt = variant { ok : nat; err : TxError };
service : (text, text, text, nat8, nat, principal, nat, principal, principal) -> {
  allowance : (principal, principal) -> (nat) query;
  approve : (principal, nat) -> (TxReceipt);
  balanceOf : (principal) -> (nat) query;
  decimals : () -> (nat8) query;
  getAllowanceSize : () -> (nat64) query;
  getHolders : (nat64, nat64) -> (vec record { principal; nat }) query;
  getLogo : () -> (text) query;
  getMetadata : () -> (Metadata) query;
  getTokenInfo : () -> (TokenInfo) query;
  getUserApprovals : (principal) -> (vec record { principal; nat }) query;
  historySize : () -> (nat64) query;
  mint : (opt vec nat8, nat64) -> (TxReceipt);
  name : () -> (text) query;
  owner : () -> (principal) query;
  setFee : (nat) -> ();
  setFeeTo : (principal) -> ();
  setLogo : (text) -> ();
  setOwner : (principal) -> ();
  symbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  transfer : (principal, nat) -> (TxReceipt);
  transferFrom : (principal, principal, nat) -> (TxReceipt);
  withdraw : (nat64, text) -> (TxReceipt);
}
